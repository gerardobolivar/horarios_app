// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["relationJoins"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User{
  id_usuario Int @id @default(autoincrement())
  nombre_usuario String @unique @db.VarChar(50) @default("")
  planes_estudio PlanEstudio[]
  role String @db.VarChar(50) @default("USER")
  ultima_sesion DateTime?
  fecha_creado DateTime @default(now())
  fecha_modificado DateTime @updatedAt
  hash Hash?
  matriculas Matricula[]
  profesores Profesor[]
}

model PlanEstudio{
  id_plan_estudio Int @id @default(autoincrement())
  nombre_plan String @db.VarChar(100)
  codigo String? @db.VarChar(10)
  usuario User @relation(fields: [usuario_id],references: [id_usuario] )
  usuario_id Int
  cursos Curso[]
  fecha_creado DateTime @default(now())
  fecha_modificado DateTime @updatedAt
}

model Curso{
  id_curso Int @id @default(autoincrement())
  plan PlanEstudio @relation(fields: [plan_id],references: [id_plan_estudio])
  plan_id Int
  horas String @db.VarChar(2)
  nombre String @db.VarChar(150)
  sigla String @db.VarChar(10)
  tipoCurso String @db.VarChar(2)
  ubicacion String @db.Char(1) @default("1")
  fecha_creado DateTime @default(now())
  fecha_modificado DateTime @updatedAt
  groups Group[]
}

model Aula{
  id_aula Int @id @default(autoincrement())
  identificador Int @unique
  cupo Int
  detalle String @db.VarChar(100)
  edificio String @db.VarChar(45)
  fecha_creado DateTime @default(now())
  fecha_modificado DateTime @updatedAt
  time_spans Time_span[]
}

model Profesor{
  id_profesor Int @id @default(autoincrement())
  nombre String @db.VarChar(30)
  primer_apellido String @db.VarChar(45)
  segundo_apellido String @db.VarChar(45)
  email String @db.VarChar(320)
  lab_mov LaboratorioMovil?
  fecha_creado DateTime @default(now())
  fecha_modificado DateTime @updatedAt
  user_id Int @default(1)
  user User @relation(fields: [user_id],references: [id_usuario])
  groups Group[]
}

model LaboratorioMovil{
  id_lab_mov Int @id @default(autoincrement())
  nombre String @db.VarChar(45)
  detalle String @db.VarChar(400)
  profesor Profesor @relation(fields: [profesor_id], references: [id_profesor])
  profesor_id Int @unique
  horarios Matricula[]
  fecha_creado DateTime @default(now())
  fecha_modificado DateTime @updatedAt
}

model Hash{
  id_hash Int @id @default(autoincrement())
  salt String @db.Char(32)
  hash String @db.Char(64)
  usuario User @relation(fields: [user_id], references: [id_usuario])
  user_id Int @unique
  fecha_modificado DateTime @updatedAt
}

model Matricula{
  matricula_id Int @id @default(autoincrement())
  laboratorio_movil LaboratorioMovil? @relation(fields: [laboratorio_movil_id], references: [id_lab_mov])
  horario Horario @relation(fields: [horario_id],references: [horario_id])
  user User @relation(fields: [user_id],references: [id_usuario])
  modalidad String @default("PRESENCIAL")
  active Boolean @default(true)
  fecha_creado DateTime @default(now())
  fecha_modificado DateTime @updatedAt
  laboratorio_movil_id Int?
  horario_id Int
  color String @db.Char(6) @default("f0f0f0")
  group Group?
  user_id Int @default(1)
  time_spans Time_span[]
}

model Horario{
  horario_id Int @id @default(autoincrement())
  matriculas Matricula[]
  active Boolean @default(true)
  fecha_creado DateTime @default(now())
  fecha_modificado DateTime @updatedAt
  ciclo Ciclo? 
}

model Ciclo{
  ciclo_id Int @id @default(autoincrement())
  nombre String @default("Ciclo")
  horario Horario? @relation(fields: [horario_id],references: [horario_id])
  horario_id Int? @unique
  active Boolean @default(false)
  fecha_creado DateTime @default(now())
  fecha_modificado DateTime @updatedAt
  active_cycle ActiveCycle?
}

model ActiveCycle{
  active_cycle_id Int @id @default(1)
  ciclo Ciclo? @relation(fields: [ciclo_id],references: [ciclo_id])
  ciclo_id Int? @unique
}

model Group{
  group_id Int @id @default(autoincrement())
  curso Curso @relation(fields: [course_id],references: [id_curso])
  matricula Matricula @relation(fields: [matricula_id],references: [matricula_id])
  profesor Profesor @relation(fields: [profesor_id],references: [id_profesor])
  groupNumber Int
  course_id Int
  matricula_id Int @unique
  profesor_id Int
  Ahours Int
  completed Boolean
  fecha_creado DateTime @default(now())
  fecha_modificado DateTime @updatedAt
  @@unique([groupNumber,course_id])
}

model Time_span{
  time_span_id Int @id @default(autoincrement())
  matricula Matricula @relation(fields: [matricula_id],references: [matricula_id])
  aula Aula @relation(fields: [aula_id],references: [id_aula])
  matricula_id Int
  aula_id Int
  hora_inicio Int
  hora_final Int
  dia String
  type String? @db.Char(2)
  fecha_creado DateTime @default(now())
  fecha_modificado DateTime @updatedAt
}